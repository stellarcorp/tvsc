load("//platforms:hex.bzl", "hex")

cc_library(
    name = "time",
    srcs = [
        "clock.cc",
        "remote_clock.cc",
    ],
    hdrs = [
        "clock.h",
        "remote_clock.h",
    ],
    visibility = ["//visibility:public"],
    deps = [":time_headers"] + select({
        "//platforms:teensyduino_core": [
            ":teensyduino_time",
        ],
        "//platforms:stm32_core": [
            ":stm32_time",
        ],
        "//conditions:default": [
            ":std_cpp_time",
        ],
    }),
)

cc_library(
    name = "time_headers",
    hdrs = [
        "time.h",
    ],
)

cc_library(
    name = "teensyduino_time",
    srcs = [
        "teensyduino_time.cc",
    ],
    target_compatible_with = [
        "//platforms:teensyduino_core",
    ],
    deps = [
        ":time_headers",
        "//third_party/arduino:core",
    ],
)

cc_library(
    name = "stm32_time",
    srcs = [
    ],
    target_compatible_with = [
        "//platforms:stm32_core",
    ],
    deps = [
        ":time_headers",
    ],
)

cc_library(
    name = "std_cpp_time",
    srcs = [
        "std_cpp_time.cc",
    ],
    target_compatible_with = [
        "//platforms:std_cpp",
    ],
    deps = [
        ":time_headers",
    ],
)

cc_library(
    name = "mock_clock",
    testonly = True,
    srcs = [
        "mock_clock.cc",
    ],
    hdrs = [
        "mock_clock.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":time",
    ],
)

cc_test(
    name = "mock_clock_test",
    srcs = [
        "mock_clock_test.cc",
    ],
    deps = [
        ":mock_clock",
        "//third_party/gtest",
    ],
)

cc_test(
    name = "remote_clock_test",
    srcs = [
        "remote_clock_test.cc",
    ],
    deps = [
        ":mock_clock",
        ":time",
        "//third_party/gtest",
    ],
)
