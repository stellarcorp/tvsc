cc_library(
    name = "gpio_headers",
    hdrs = [
        "gpio.h",
    ],
    deps = [
        "//hal",
    ],
)

cc_library(
    name = "gpio",
    target_compatible_with = select({
        "//platforms:teensyduino_core": [],
        "//platforms:stm32_core": [],
        "@platforms//os:linux": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    visibility = ["//visibility:public"],
    deps = [
        ":gpio_headers",
    ] + select({
        "//platforms:teensyduino_core": [
            ":teensyduino_gpio",
        ],
        "//platforms:stm32_core": [
            ":stm32_gpio",
        ],
        "@platforms//os:linux": [
            ":simulation",
        ],
    }),
)

cc_library(
    name = "teensyduino_gpio",
    srcs = [
        "teensyduino_gpio.cc",
    ],
    hdrs = [
        "teensyduino_gpio.h",
    ],
    target_compatible_with = [
        "//platforms:teensyduino_core",
    ],
    deps = [
        ":gpio_headers",
        "//hal",
        "//third_party/arduino:core",
    ],
)

cc_library(
    name = "stm32_gpio",
    srcs = [
        "stm_gpio.cc",
    ],
    hdrs = [
        "stm_gpio.h",
    ],
    target_compatible_with = [
        "//platforms:stm32_core",
    ],
    deps = [
        ":gpio_headers",
        "//hal",
        "//third_party/stm32",
    ],
)

cc_library(
    name = "simulation",
    srcs = [
        "gpio_noop.cc",
    ],
    hdrs = [
        "gpio_interceptor.h",
        "gpio_noop.h",
    ],
    target_compatible_with = [
        "@platforms//os:linux",
    ],
    deps = [
        ":gpio_headers",
        "//hal",
        "//hal/simulation",
    ],
)
