load("//platforms:hex.bzl", "hex")

cc_library(
    name = "output",
    target_compatible_with = select({
        "//platforms:stm32_gpio": [
            "@platforms//:incompatible",
        ],
        "//conditions:default": [
        ],
    }),
    visibility = ["//visibility:public"],
    deps = [":output_headers"] + select({
        "//platforms:teensyduino_gpio": [
            ":teensyduino_output",
        ],
        "//conditions:default": [
            ":glog_output",
        ],
    }),
)

cc_library(
    name = "output_headers",
    hdrs = [
        "output.h",
    ],
)

cc_library(
    name = "teensyduino_output",
    srcs = [
        "teensyduino_output.cc",
    ],
    target_compatible_with = select({
        "//platforms:teensyduino_gpio": [
        ],
        "//conditions:default": [
            "@platforms//:incompatible",
        ],
    }),
    deps = [
        ":output_headers",
        "//third_party/arduino:core",
    ],
)

cc_library(
    name = "std_cpp_output",
    srcs = [
        "std_cpp_output.cc",
    ],
    target_compatible_with = select({
        "//platforms:teensyduino_gpio": [
            "@platforms//:incompatible",
        ],
        "//platforms:stm32_gpio": [
            "@platforms//:incompatible",
        ],
        "//conditions:default": [
        ],
    }),
    deps = [
        ":output_headers",
    ],
)

cc_library(
    name = "glog_output",
    srcs = [
        "glog_output.cc",
    ],
    target_compatible_with = select({
        "//platforms:teensyduino_gpio": [
            "@platforms//:incompatible",
        ],
        "//platforms:stm32_gpio": [
            "@platforms//:incompatible",
        ],
        "//conditions:default": [
        ],
    }),
    deps = [
        ":output_headers",
        "//third_party/glog",
    ],
)
