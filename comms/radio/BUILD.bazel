load("//platforms:hex.bzl", "hex")

cc_library(
    name = "radio",
    hdrs = [
        "fragment.h",
        "fragment_transceiver.h",
        "half_duplex_radio.h",
        "radio_utilities.h",
        "yield.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//base",
        "//buffer",
        "//hal/output",
        "//hal/time",
        "//hash",
        "//random",
    ],
)

cc_library(
    name = "mock_radio",
    testonly = True,
    hdrs = ["mock_radio.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":radio",
        "//hal/output",
        "//hal/time",
    ],
)

cc_library(
    name = "rf69hcw",
    srcs = [
        "rf69hcw.cc",
    ],
    hdrs = [
        "rf69hcw.h",
    ],
    target_compatible_with = select({
        "//platforms:wiring_pi_gpio": [
        ],
        "//platforms:teensyduino_gpio": [
        ],
        "//platforms:no_gpio": [
            "@platforms//:incompatible",
        ],
        "//conditions:default": [
            "@platforms//:incompatible",
        ],
    }),
    visibility = ["//visibility:public"],
    deps = [
        ":radio",
        "//base",
        "//hal/gpio",
        "//hal/output",
        "//hal/spi",
        "//hal/time",
        "//random",
    ] + select(
        {
            "//platforms:teensy40_board": [
                ":single_radio_pin_mapping_teensy40_default",
            ],
            "//platforms:teensy41_board": [
                ":single_radio_pin_mapping_teensy41_default",
            ],
        },
    ),
)

cc_library(
    name = "single_radio_pin_mapping",
    hdrs = [
        "single_radio_pin_mapping.h",
    ],
)

cc_library(
    name = "single_radio_pin_mapping_teensy40_default",
    srcs = [
        "single_radio_pin_mapping_teensy40_default.cc",
    ],
    target_compatible_with = select({
        "//platforms:teensy40_board": [
        ],
        "//conditions:default": [
            "@platforms//:incompatible",
        ],
    }),
    deps = [
        ":single_radio_pin_mapping",
    ],
)

cc_library(
    name = "single_radio_pin_mapping_teensy41_default",
    srcs = [
        "single_radio_pin_mapping_teensy41_default.cc",
    ],
    target_compatible_with = select({
        "//platforms:teensy41_board": [
        ],
        "//conditions:default": [
            "@platforms//:incompatible",
        ],
    }),
    deps = [
        ":single_radio_pin_mapping",
    ],
)

cc_binary(
    name = "echo_client",
    srcs = ["echo_client.cc"],
    target_compatible_with = select({
        "//platforms:no_gpio": [
            "@platforms//:incompatible",
        ],
        "//conditions:default": [
        ],
    }),
    deps = [
        ":radio",
        ":rf69hcw",
        "//hal/gpio",
        "//hal/output",
        "//hal/spi",
        "//hal/time",
        "//random",
    ] + select(
        {
            "//platforms:teensy40_board": [
                ":single_radio_pin_mapping_teensy40_default",
            ],
            "//platforms:teensy41_board": [
                ":single_radio_pin_mapping_teensy41_default",
            ],
        },
    ),
)

hex(
    name = "echo_client_hex",
    src = ":echo_client",
    out = "echo_client.hex",
    target_compatible_with = select({
        "@platforms//os:none": [
        ],
        "//conditions:default": [
            "@platforms//:incompatible",
        ],
    }),
)

cc_binary(
    name = "echo_server",
    srcs = ["echo_server.cc"],
    target_compatible_with = select({
        "//platforms:no_gpio": [
            "@platforms//:incompatible",
        ],
        "//conditions:default": [
        ],
    }),
    deps = [
        ":radio",
        ":rf69hcw",
        "//hal/eeprom",
        "//hal/gpio",
        "//hal/output",
        "//hal/spi",
        "//hal/time",
        "//random",
    ] + select(
        {
            "//platforms:teensy40_board": [
                ":single_radio_pin_mapping_teensy40_default",
            ],
            "//platforms:teensy41_board": [
                ":single_radio_pin_mapping_teensy41_default",
            ],
        },
    ),
)

hex(
    name = "echo_server_hex",
    src = ":echo_server",
    out = "echo_server.hex",
    target_compatible_with = select({
        "@platforms//os:none": [
        ],
        "//conditions:default": [
            "@platforms//:incompatible",
        ],
    }),
)

cc_test(
    name = "mock_radio_test",
    srcs = ["mock_radio_test.cc"],
    deps = [
        ":mock_radio",
        "//hal/time:mock_clock",
        "//third_party/gtest",
    ],
)
