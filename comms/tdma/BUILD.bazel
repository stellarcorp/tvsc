load("@rules_cc//cc:defs.bzl", "cc_library", "cc_proto_library")
load("@rules_proto//proto:defs.bzl", "proto_library")

cc_library(
    name = "tdma",
    srcs = [
        "schedule.cc",
    ],
    hdrs = [
        "schedule.h",
        "tdma_transceiver.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":frame",
        ":frame_serialization",
        "//base",
        "//comms/packet",
        "//comms/radio",
        "//comms/route",
        "//hal/output",
        "//hal/time",
    ],
)

cc_library(
    name = "frame_serialization",
    visibility = ["//visibility:public"],
    deps = [":frame_serialization_headers"] + select({
        "@platforms//os:none": [
            ":frame_serialization_nanopb",
        ],
        "//conditions:default": [
            ":frame_serialization_proto",
        ],
    }),
)

cc_library(
    name = "frame",
    srcs = [
        "frame.cc",
    ],
    hdrs = [
        "frame.h",
    ],
    deps = [
        "//base",
    ],
)

cc_library(
    name = "frame_serialization_headers",
    hdrs = [
        "frame_serialization.h",
    ],
    deps = [
        ":frame",
    ],
)

cc_library(
    name = "frame_serialization_proto",
    srcs = [
        "frame_serialization_proto.cc",
    ],
    target_compatible_with = select({
        "@platforms//os:none": [
            "@platforms//:incompatible",
        ],
        "//conditions:default": [],
    }),
    deps = [
        ":frame_serialization_headers",
        "//comms/tdma/proto:frame_cc_proto",
    ],
)

cc_library(
    name = "frame_serialization_nanopb",
    srcs = [
        "frame_serialization_nanopb.cc",
    ],
    target_compatible_with = select({
        "@platforms//os:none": [],
        "//conditions:default": [
            "@platforms//:incompatible",
        ],
    }),
    deps = [
        ":frame_serialization_headers",
        "//comms/tdma/nanopb_proto:frame_nano_cc_proto",
    ],
)

cc_test(
    name = "schedule_test",
    srcs = ["schedule_test.cc"],
    deps = [
        ":tdma",
        "//hal/time:mock_clock",
        "//third_party/gtest",
    ],
)

cc_test(
    name = "frame_serialization_test",
    srcs = ["frame_serialization_test.cc"],
    deps = [
        ":frame_serialization",
        "//third_party/gtest",
    ],
)

cc_test(
    name = "tdma_transceiver_test",
    srcs = ["tdma_transceiver_test.cc"],
    deps = [
        ":tdma",
        "//comms/radio:mock_radio",
        "//hal/time:mock_clock",
        "//third_party/gtest",
    ],
)
