load("@rules_proto//proto:defs.bzl", "proto_library")
load("@com_github_nanopb_nanopb//extra/bazel:nanopb_cc_proto_library.bzl", "cc_nanopb_proto_library")

proto_library(
    name = "frame_proto",
    srcs = ["frame.proto"],
    deps = [
        "@com_github_nanopb_nanopb//:nanopb_proto",
    ],
)

cc_nanopb_proto_library(
    name = "frame_nano_cc_proto",
    copts = [
        # Without these copts, the code generated by nanopb is interpreted by gcc (and likely clang
        # and other compilers) as C code, rather than C++. That might be fine in many cases. In this
        # example though, we demonstrate how to use a std::vector for one of the protobuf fields in
        # the generated code. If you only want C code, remove this option.
        "-x",
        "c++",
    ],
    options = {
        "@com_github_nanopb_nanopb//:nanopb_plugin": [
            # Command line arguments to the nanopb protobuf compiler could go here.
            # The options below are only shown as examples and should only be used if specifically
            # desired.
            # Note these options are not tracked by Bazel. Changing them does not automatically mark
            # this target to be rebuilt.
            # "--verbose",
            "--cpp-descriptors",
        ],
    },
    protos = [
        ":frame_proto",
    ],
    target_compatible_with = select({
        "@platforms//os:none": [],
        "//conditions:default": [
            "@platforms//:incompatible",
        ],
    }),
    visibility = ["//visibility:public"],
)
