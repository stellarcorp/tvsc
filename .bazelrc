# Defaults for all builds
build --enable_platform_specific_config
build --config=platform_build
build --config=c++20

# Enable use of timestamps in builds.
build --stamp

# Turn off this warning, especially in C++20. C++20 deprecated bitwise assignment operators on
# volatile variables. Unfortunately, these operators are used extensively in many embedded
# libraries. This deprecation was undone in C++23. For more information, see
# https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2327r1.pdf
build --cxxopt -Wno-volatile
build --cxxopt -fcoroutines

build:linux --platforms=//platforms:linux_x86_64_general
build:linux --copt -DGENERAL_PURPOSE_COMPUTER

# Settings for different C++ dialects
build:c++20 --cxxopt -std=c++20
build:c++23 --cxxopt -std=c++23
build:c++26 --cxxopt -std=c++26

# Setting to enable platform builds.
build:platform_build --incompatible_enable_cc_toolchain_resolution

build:teensy40 --platforms=//platforms:teensy40
build:teensy40 --cpu=armv7e-mf --crosstool_top=//toolchain/teensy:gcc_toolchain --host_crosstool_top=@bazel_tools//tools/cpp:toolchain

build:teensy41 --platforms=//platforms:teensy41
build:teensy41 --cpu=armv7e-mf --crosstool_top=//toolchain/teensy:gcc_toolchain --host_crosstool_top=@bazel_tools//tools/cpp:toolchain

build:nucleo_l412kb --platforms=//platforms:nucleo_l412kb
build:nucleo_l412kb --cpu=armv7e-mf-stm32-l412 --crosstool_top=//toolchain/nucleo_l4:gcc_toolchain --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
build:nucleo_l412kb --copt -DEMBEDDED_PLATFORM
build:nucleo_l412kb --copt -DSTM32L412xx
build:nucleo_l412kb --copt -DNUCLEO_L412KB

build:nucleo_l432kc --platforms=//platforms:nucleo_l432kc
build:nucleo_l432kc --cpu=armv7e-mf-stm32-l432 --crosstool_top=//toolchain/nucleo_l4:gcc_toolchain --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
build:nucleo_l432kc --copt -DEMBEDDED_PLATFORM
build:nucleo_l432kc --copt -DSTM32L432xx
build:nucleo_l432kc --copt -DNUCLEO_L432KC

build:nucleo_l452re --platforms=//platforms:nucleo_l452re
build:nucleo_l452re --cpu=armv7e-mf-stm32-l452 --crosstool_top=//toolchain/nucleo_l4:gcc_toolchain --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
build:nucleo_l452re --copt -DEMBEDDED_PLATFORM
build:nucleo_l452re --copt -DSTM32L452xx
build:nucleo_l452re --copt -DNUCLEO_L452RE

build:feature_bringup --platforms=//platforms:feature_bringup
build:feature_bringup --cpu=armv7e-mf-stm32-l452 --crosstool_top=//toolchain/nucleo_l4:gcc_toolchain --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
build:feature_bringup --copt -DEMBEDDED_PLATFORM
build:feature_bringup --copt -DSTM32L452xx
build:feature_bringup --copt -DFEATURE_BRINGUP

build:satellite --platforms=//platforms:satellite
build:satellite --cpu=armv7e-mf-stm32-l452 --crosstool_top=//toolchain/nucleo_l4:gcc_toolchain --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
build:satellite --copt -DEMBEDDED_PLATFORM
build:satellite --copt -DSTM32L452xx
build:satellite --copt -DSATELLITE

# Profiling
# Install these tools:
#   apt install google-perftools libgoogle-perftools-dev
#
# Instrument your code by bracketing the code you want profiled in calls to
# tvsc::profile::profiler_start() and tvsc::profile::profiler_stop(). These are simple wrapper
# functions around ProfilerStart(<filename>) and ProfilerStop(). (These functions are declared
# in <gperftools/profiler.h>.)
#
# Build with:
#   bazel build --config profile -c opt <target>
#
# Run the code.
#   ./your_binary
#
# Analyze results with:
#   pprof --text ./your_binary profile.prof
#
# More details at https://gperftools.github.io/gperftools/cpuprofile.html
build:profile --linkopt -lprofiler
build:profile --copt -g
build:profile --copt -DPROFILING_ENABLED

# Address sanitizer
# CC=clang bazel build --config asan
build:asan --strip=never
build:asan --copt -fsanitize=address
build:asan --copt -DADDRESS_SANITIZER
build:asan --copt -g
build:asan --copt -O3
build:asan --copt -fno-omit-frame-pointer
build:asan --linkopt -fsanitize=address

# Memory sanitizer
# CC=clang bazel build --config msan
build:msan --strip=never
build:msan --copt -fsanitize=memory
build:msan --copt -DMEMORY_SANITIZER
build:msan --copt -g
build:msan --copt -O3
build:msan --copt -fno-omit-frame-pointer
build:msan --linkopt -fsanitize=memory

# Undefined Behavior Sanitizer
# CC=clang bazel build --config ubsan
build:ubsan --strip=never
build:ubsan --copt -fsanitize=undefined
build:ubsan --copt -DUNDEFINED_BEHAVIOR_SANITIZER
build:ubsan --copt -g
build:ubsan --copt -O3
build:ubsan --copt -fno-omit-frame-pointer
build:ubsan --linkopt -fsanitize=undefined
build:ubsan --linkopt -lubsan

# Thread Sanitizer
# CC=clang bazel build --config tsan
build:tsan --strip=never
build:tsan --copt -fsanitize=thread
build:tsan --copt -THREAD_SANITIZER
build:tsan --copt -g
build:tsan --copt -O3
build:tsan --copt -fno-omit-frame-pointer
build:tsan --linkopt -fsanitize=thread
build:tsan --linkopt -ltsan

# Code coverage
# This option gives us a single combined report for the whole repository.
# To generate HTML for browsing the code coverage, run the following from the top level of the repository:
#   $ bazel coverage -c opt //...
#   $ genhtml --output coverage "$(bazel info output_path)/_coverage/_coverage_report.dat"
# The resulting html will be in a directory named "coverage".
coverage --combined_report=lcov
coverage --instrumentation_filter "^//"
