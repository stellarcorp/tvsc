load("@rules_proto//proto:defs.bzl", "proto_library")
load("@rules_cc//cc:defs.bzl", "cc_proto_library")
load("@com_github_nanopb_nanopb//extra/bazel:nanopb_cc_proto_library.bzl", "cc_nanopb_proto_library")
load("//platforms:hex.bzl", "hex")

cc_library(
    name = "radio",
    hdrs = [
        "radio_configuration.h",
        "settings.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":radio_nano_cc_proto",
        "//base",
        "//random",
    ],
)

cc_library(
    name = "rh_rf69",
    hdrs = [
        "rh_rf69_configuration.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":radio",
        ":radio_nano_cc_proto",
        "//base",
        "//third_party/radio_head:rf69_driver",
    ],
)

cc_binary(
    name = "loop_send",
    srcs = ["loop_send.cc"],
    local_defines = select({
        "//platforms:teensy40_board": ["RFM69_INTERRUPT_PIN=17"],
        "//platforms:teensy41_board": ["RFM69_INTERRUPT_PIN=24"],
    }),
    target_compatible_with = [
        "@platforms//os:none",
    ],
    deps = [
        ":radio",
        ":rh_rf69",
        "//third_party/radio_head:rf69_driver",
    ],
)

hex(
    name = "loop_send_hex",
    src = ":loop_send",
    out = "loop_send.hex",
)

filegroup(
    name = "settings_proto_file",
    srcs = ["settings.proto"],
    visibility = ["//visibility:public"],
)

proto_library(
    name = "settings_proto",
    srcs = ["settings.proto"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_github_nanopb_nanopb//:nanopb_proto",
    ],
)

filegroup(
    name = "radio_proto_file",
    srcs = ["radio.proto"],
    visibility = ["//visibility:public"],
)

proto_library(
    name = "radio_proto",
    srcs = ["radio.proto"],
    visibility = ["//visibility:public"],
    deps = [
        ":settings_proto",
        "@com_github_nanopb_nanopb//:nanopb_proto",
    ],
)

cc_proto_library(
    name = "settings_cc_proto",
    target_compatible_with = select(
        {
            "@platforms//os:none": [
                "@platforms//:incompatible",
            ],
            "//conditions:default": [],
        },
    ),
    visibility = ["//visibility:public"],
    deps = [
        ":settings_proto",
    ],
)

cc_proto_library(
    name = "radio_cc_proto",
    target_compatible_with = select(
        {
            "@platforms//os:none": [
                "@platforms//:incompatible",
            ],
            "//conditions:default": [],
        },
    ),
    visibility = ["//visibility:public"],
    deps = [
        ":radio_proto",
    ],
)

cc_nanopb_proto_library(
    name = "radio_nano_cc_proto",
    copts = [
        # Without these copts, the code generated by nanopb is interpreted by gcc (and likely clang
        # and other compilers) as C code, rather than C++. That might be fine in many cases. In this
        # example though, we demonstrate how to use a std::vector for one of the protobuf fields in
        # the generated code. If you only want C code, remove this option.
        "-x",
        "c++",
    ],
    options = {
        "@com_github_nanopb_nanopb//:nanopb_plugin": [
            # Command line arguments to the nanopb protobuf compiler could go here.
            # The options below are only shown as examples and should only be used if specifically
            # desired.
            # Note these options are not tracked by Bazel. Changing them does not automatically mark
            # this target to be rebuilt.
            # "--verbose",
            "--cpp-descriptors",
        ],
    },
    protos = [
        ":radio_proto",
        ":settings_proto",
    ],
    visibility = ["//visibility:public"],
)

cc_test(
    name = "rh_rf69_configuration_test",
    srcs = [
        "rh_rf69_configuration_test.cc",
    ],
    tags = ["manual"],
    deps = [
        ":radio",
        ":radio_cc_proto",
        ":rh_rf69",
        ":settings_cc_proto",
        "//third_party/gtest",
        "//third_party/radio_head:rf69_driver",
    ],
)

cc_test(
    name = "settings_test",
    srcs = [
        "settings_test.cc",
    ],
    deps = [
        ":radio",
        "//base",
        "//third_party/gtest",
    ],
)
