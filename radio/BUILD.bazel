load("@rules_proto//proto:defs.bzl", "proto_library")
load("@rules_cc//cc:defs.bzl", "cc_proto_library")
load("@com_github_nanopb_nanopb//extra/bazel:nanopb_cc_proto_library.bzl", "cc_nanopb_proto_library")
load("//platforms:hex.bzl", "hex")

cc_library(
    name = "radio",
    hdrs = [
        "radio_configuration.h",
        "settings.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":radio_nano_cc_proto",
        "//base",
        "//random",
    ],
)

cc_library(
    name = "rf69hcw",
    srcs = [
        "rf69hcw.cc",
    ],
    hdrs = [
        "rf69hcw.h",
        "rf69hcw_configuration.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":radio",
        ":radio_nano_cc_proto",
        "//base",
        "//hal/gpio",
        "//hal/output",
        "//hal/spi",
        "//hal/time",
        "//random",
    ],
)

cc_library(
    name = "single_radio_pin_mapping",
    hdrs = [
        "single_radio_pin_mapping.h",
    ],
)

cc_library(
    name = "single_radio_pin_mapping_teensy40_default",
    srcs = [
        "single_radio_pin_mapping_teensy40_default.cc",
    ],
    target_compatible_with = select({
        "//platforms:teensy40_board": [
        ],
        "//conditions:default": [
            "@platforms//:incompatible",
        ],
    }),
    deps = [
        ":single_radio_pin_mapping",
    ],
)

cc_library(
    name = "single_radio_pin_mapping_teensy41_default",
    srcs = [
        "single_radio_pin_mapping_teensy41_default.cc",
    ],
    target_compatible_with = select({
        "//platforms:teensy41_board": [
        ],
        "//conditions:default": [
            "@platforms//:incompatible",
        ],
    }),
    deps = [
        ":single_radio_pin_mapping",
    ],
)

cc_library(
    name = "single_radio_pin_mapping_odroid_m1_default",
    srcs = [
        "single_radio_pin_mapping_odroid_m1_default.cc",
    ],
    target_compatible_with = select({
        "//platforms:odroid_m1_board": [
        ],
        "//conditions:default": [
            "@platforms//:incompatible",
        ],
    }),
    deps = [
        ":single_radio_pin_mapping",
    ],
)

cc_binary(
    name = "repeater",
    srcs = ["repeater.cc"],
    target_compatible_with = select({
        "//platforms:no_gpio": [
            "@platforms//:incompatible",
        ],
        "//conditions:default": [
        ],
    }),
    deps = [
        ":radio",
        ":rf69hcw",
        "//hal/gpio",
        "//hal/output",
        "//hal/spi",
        "//hal/time",
        "//random",
    ] + select(
        {
            "//platforms:teensy40_board": [
                ":single_radio_pin_mapping_teensy40_default",
            ],
            "//platforms:teensy41_board": [
                ":single_radio_pin_mapping_teensy41_default",
            ],
            "//platforms:odroid_m1_board": [
                ":single_radio_pin_mapping_odroid_m1_default",
            ],
        },
    ),
)

hex(
    name = "repeater_hex",
    src = ":repeater",
    out = "repeater.hex",
    target_compatible_with = select({
        "@platforms//os:none": [
        ],
        "//conditions:default": [
            "@platforms//:incompatible",
        ],
    }),
)

cc_binary(
    name = "echo_client",
    srcs = ["echo_client.cc"],
    target_compatible_with = select({
        "//platforms:no_gpio": [
            "@platforms//:incompatible",
        ],
        "//conditions:default": [
        ],
    }),
    deps = [
        ":radio",
        ":rf69hcw",
        "//hal/gpio",
        "//hal/output",
        "//hal/spi",
        "//hal/time",
        "//random",
    ] + select(
        {
            "//platforms:teensy40_board": [
                ":single_radio_pin_mapping_teensy40_default",
            ],
            "//platforms:teensy41_board": [
                ":single_radio_pin_mapping_teensy41_default",
            ],
            "//platforms:odroid_m1_board": [
                ":single_radio_pin_mapping_odroid_m1_default",
            ],
        },
    ),
)

hex(
    name = "echo_client_hex",
    src = ":echo_client",
    out = "echo_client.hex",
    target_compatible_with = select({
        "@platforms//os:none": [
        ],
        "//conditions:default": [
            "@platforms//:incompatible",
        ],
    }),
)

cc_binary(
    name = "echo_server",
    srcs = ["echo_server.cc"],
    target_compatible_with = select({
        "//platforms:no_gpio": [
            "@platforms//:incompatible",
        ],
        "//conditions:default": [
        ],
    }),
    deps = [
        ":radio",
        ":rf69hcw",
        "//hal/gpio",
        "//hal/output",
        "//hal/spi",
        "//hal/time",
        "//random",
    ] + select(
        {
            "//platforms:teensy40_board": [
                ":single_radio_pin_mapping_teensy40_default",
            ],
            "//platforms:teensy41_board": [
                ":single_radio_pin_mapping_teensy41_default",
            ],
            "//platforms:odroid_m1_board": [
                ":single_radio_pin_mapping_odroid_m1_default",
            ],
        },
    ),
)

hex(
    name = "echo_server_hex",
    src = ":echo_server",
    out = "echo_server.hex",
    target_compatible_with = select({
        "@platforms//os:none": [
        ],
        "//conditions:default": [
            "@platforms//:incompatible",
        ],
    }),
)

cc_binary(
    name = "loop_send",
    srcs = ["loop_send.cc"],
    target_compatible_with = select({
        "//platforms:no_gpio": [
            "@platforms//:incompatible",
        ],
        "//conditions:default": [
        ],
    }),
    deps = [
        ":radio",
        ":rf69hcw",
        "//hal/gpio",
        "//hal/output",
        "//hal/spi",
        "//hal/time",
        "//random",
    ] + select(
        {
            "//platforms:teensy40_board": [
                ":single_radio_pin_mapping_teensy40_default",
            ],
            "//platforms:teensy41_board": [
                ":single_radio_pin_mapping_teensy41_default",
            ],
            "//platforms:odroid_m1_board": [
                ":single_radio_pin_mapping_odroid_m1_default",
            ],
        },
    ),
)

hex(
    name = "loop_send_hex",
    src = ":loop_send",
    out = "loop_send.hex",
    target_compatible_with = select({
        "@platforms//os:none": [
        ],
        "//conditions:default": [
            "@platforms//:incompatible",
        ],
    }),
)

cc_binary(
    name = "loop_receive",
    srcs = ["loop_receive.cc"],
    target_compatible_with = select({
        "//platforms:no_gpio": [
            "@platforms//:incompatible",
        ],
        "//conditions:default": [
        ],
    }),
    deps = [
        ":radio",
        ":rf69hcw",
        "//hal/gpio",
        "//hal/output",
        "//hal/spi",
        "//hal/time",
        "//random",
    ] + select(
        {
            "//platforms:teensy40_board": [
                ":single_radio_pin_mapping_teensy40_default",
            ],
            "//platforms:teensy41_board": [
                ":single_radio_pin_mapping_teensy41_default",
            ],
            "//platforms:odroid_m1_board": [
                ":single_radio_pin_mapping_odroid_m1_default",
            ],
        },
    ),
)

hex(
    name = "loop_receive_hex",
    src = ":loop_receive",
    out = "loop_receive.hex",
    target_compatible_with = select({
        "@platforms//os:none": [
        ],
        "//conditions:default": [
            "@platforms//:incompatible",
        ],
    }),
)

filegroup(
    name = "packet_proto_file",
    srcs = ["packet.proto"],
    visibility = ["//visibility:public"],
)

proto_library(
    name = "packet_proto",
    srcs = ["packet.proto"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_github_nanopb_nanopb//:nanopb_proto",
    ],
)

filegroup(
    name = "settings_proto_file",
    srcs = ["settings.proto"],
    visibility = ["//visibility:public"],
)

proto_library(
    name = "settings_proto",
    srcs = ["settings.proto"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_github_nanopb_nanopb//:nanopb_proto",
    ],
)

filegroup(
    name = "radio_proto_file",
    srcs = ["radio.proto"],
    visibility = ["//visibility:public"],
)

proto_library(
    name = "radio_proto",
    srcs = ["radio.proto"],
    visibility = ["//visibility:public"],
    deps = [
        ":settings_proto",
        "@com_github_nanopb_nanopb//:nanopb_proto",
    ],
)

cc_proto_library(
    name = "settings_cc_proto",
    target_compatible_with = select(
        {
            "@platforms//os:none": [
                "@platforms//:incompatible",
            ],
            "//conditions:default": [],
        },
    ),
    visibility = ["//visibility:public"],
    deps = [
        ":settings_proto",
    ],
)

cc_proto_library(
    name = "radio_cc_proto",
    target_compatible_with = select(
        {
            "@platforms//os:none": [
                "@platforms//:incompatible",
            ],
            "//conditions:default": [],
        },
    ),
    visibility = ["//visibility:public"],
    deps = [
        ":radio_proto",
    ],
)

cc_nanopb_proto_library(
    name = "radio_nano_cc_proto",
    copts = [
        # Without these copts, the code generated by nanopb is interpreted by gcc (and likely clang
        # and other compilers) as C code, rather than C++. That might be fine in many cases. In this
        # example though, we demonstrate how to use a std::vector for one of the protobuf fields in
        # the generated code. If you only want C code, remove this option.
        "-x",
        "c++",
    ],
    options = {
        "@com_github_nanopb_nanopb//:nanopb_plugin": [
            # Command line arguments to the nanopb protobuf compiler could go here.
            # The options below are only shown as examples and should only be used if specifically
            # desired.
            # Note these options are not tracked by Bazel. Changing them does not automatically mark
            # this target to be rebuilt.
            # "--verbose",
            "--cpp-descriptors",
        ],
    },
    protos = [
        ":packet_proto",
        ":radio_proto",
        ":settings_proto",
    ],
    visibility = ["//visibility:public"],
)

cc_test(
    name = "rf69hcw_configuration_test",
    srcs = [
        "rf69hcw_configuration_test.cc",
    ],
    tags = ["manual"],
    deps = [
        ":radio",
        ":radio_cc_proto",
        ":rf69hcw",
        ":settings_cc_proto",
        "//third_party/gtest",
    ],
)

cc_test(
    name = "settings_test",
    srcs = [
        "settings_test.cc",
    ],
    deps = [
        ":radio",
        "//base",
        "//third_party/gtest",
    ],
)
