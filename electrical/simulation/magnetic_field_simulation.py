import numpy as np
from .trace_generator import generate_spiral_trace


class MagneticFieldSimulation:
    """
    Simulates the magnetic field generated by a PCB net using the Biot-Savart law and FEM
    discretization.
    """
    def __init__(self, net, voltage):
        self.net = net
        self.current = voltage / self.net.estimate_resistance()

    def biot_savart(self, observation_point):
        """Computes the magnetic field at a given point using Biot-Savart law."""
        mu_0 = 4 * np.pi * 1e-7  # Permeability of free space
        B = np.zeros(3)

        for trace in self.net.traces:
            for segment in trace.segments:
                dl = segment.end - segment.start
                midpoint = (segment.start + segment.end) / 2
                r = observation_point - midpoint
                r_mag = np.linalg.norm(r)

                if r_mag == 0:
                    continue  # Avoid singularities

                dB = mu_0 * self.current * np.cross(dl,
                                                    r) / (4 * np.pi * r_mag**3)
                B += dB

        return B

    def simulate_field(self, grid_points):
        """Computes the magnetic field at multiple observation points."""
        field_map = np.zeros((len(grid_points), 3))
        for i, point in enumerate(grid_points):
            field_map[i] = self.biot_savart(point)
        return field_map

    def compute_force(self, B_ext, center=np.array([0., 0., 0.])):
        """Computes the total force and torque on the PCB in an external magnetic field."""
        total_force = np.zeros(3)
        for trace in self.net.traces:
            for segment in trace.segments:
                dl = segment.end - segment.start
                force = self.current * np.cross(dl, B_ext)
                total_force += force
        return total_force

    def compute_torque(self, B_ext, center=np.array([0., 0., 0.])):
        """Computes the total force and torque on the PCB in an external magnetic field."""
        torque = 0
        for trace in self.net.traces:
            moment = trace.estimate_magnetic_moment(self.current)
            torque += np.cross(moment, B_ext)
        return torque
